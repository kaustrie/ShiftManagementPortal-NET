// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using ShiftManagementPortal.Infrastructure.Data;
using System;

namespace ShiftManagementPortal.Infrastructure.Migrations
{
    [DbContext(typeof(Data.Database))]
    [Migration("20171114025342_SMP_DEV")]
    partial class SMP_DEV
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("Relational:Sequence:.DBSequenceHiLo", "'DBSequenceHiLo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("SqlServer:HiLoSequenceName", "DBSequenceHiLo")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

            modelBuilder.Entity("ShiftManagementPortal.Core.Domain.Model.Contact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Fax");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Mobile");

                    b.Property<string>("Phone1");

                    b.Property<string>("Phone2");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("ShiftManagementPortal.Core.Domain.Model.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Fax");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Mobile");

                    b.Property<string>("Phone1");

                    b.Property<string>("Phone2");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ShiftManagementPortal.Core.Domain.Model.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("Email");

                    b.Property<string>("Fax");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender");

                    b.Property<string>("LastName");

                    b.Property<string>("Mobile");

                    b.Property<string>("Phone1");

                    b.Property<string>("Phone2");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("ShiftManagementPortal.Core.Domain.Model.Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<DateTime>("ExpectedDuration");

                    b.Property<bool>("IsEventShiftCollisionAllowed");

                    b.Property<bool>("IsIntermission");

                    b.Property<bool>("IsLobbyToBeDecorated");

                    b.Property<bool>("IsPlaybillAvailable");

                    b.Property<bool>("IsReservedSeating");

                    b.Property<string>("Name");

                    b.Property<int>("TotalCustodiansRequired");

                    b.Property<int>("TotalFullUshersRequired");

                    b.Property<int>("TotalHeadUshersRequired");

                    b.Property<int>("TotalPartialUshersRequired");

                    b.Property<long>("VenueId");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("ShiftManagementPortal.Core.Domain.Model.Merchant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<long?>("EventId");

                    b.Property<string>("Name");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Merchants");
                });

            modelBuilder.Entity("ShiftManagementPortal.Core.Domain.Model.Venue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Capacity");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("ShiftManagementPortal.Core.Domain.Model.Contact", b =>
                {
                    b.OwnsOne("ShiftManagementPortal.Core.Domain.Model.Address", "Address", b1 =>
                        {
                            b1.Property<long?>("ContactId");

                            b1.Property<string>("City");

                            b1.Property<string>("Line1");

                            b1.Property<string>("Line2");

                            b1.Property<string>("StateCode");

                            b1.Property<int>("ZipCode");

                            b1.ToTable("Contacts");

                            b1.HasOne("ShiftManagementPortal.Core.Domain.Model.Contact")
                                .WithOne("Address")
                                .HasForeignKey("ShiftManagementPortal.Core.Domain.Model.Address", "ContactId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("ShiftManagementPortal.Core.Domain.Model.Customer", b =>
                {
                    b.OwnsOne("ShiftManagementPortal.Core.Domain.Model.Address", "Address", b1 =>
                        {
                            b1.Property<long?>("CustomerId");

                            b1.Property<string>("City");

                            b1.Property<string>("Line1");

                            b1.Property<string>("Line2");

                            b1.Property<string>("StateCode");

                            b1.Property<int>("ZipCode");

                            b1.ToTable("Customers");

                            b1.HasOne("ShiftManagementPortal.Core.Domain.Model.Customer")
                                .WithOne("Address")
                                .HasForeignKey("ShiftManagementPortal.Core.Domain.Model.Address", "CustomerId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("ShiftManagementPortal.Core.Domain.Model.Employee", b =>
                {
                    b.OwnsOne("ShiftManagementPortal.Core.Domain.Model.Address", "Address", b1 =>
                        {
                            b1.Property<long?>("EmployeeId");

                            b1.Property<string>("City");

                            b1.Property<string>("Line1");

                            b1.Property<string>("Line2");

                            b1.Property<string>("StateCode");

                            b1.Property<int>("ZipCode");

                            b1.ToTable("Employees");

                            b1.HasOne("ShiftManagementPortal.Core.Domain.Model.Employee")
                                .WithOne("Address")
                                .HasForeignKey("ShiftManagementPortal.Core.Domain.Model.Address", "EmployeeId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("ShiftManagementPortal.Core.Domain.Model.Merchant", b =>
                {
                    b.HasOne("ShiftManagementPortal.Core.Domain.Model.Event")
                        .WithMany("Merchants")
                        .HasForeignKey("EventId");

                    b.OwnsOne("ShiftManagementPortal.Core.Domain.Model.Address", "Address", b1 =>
                        {
                            b1.Property<long?>("MerchantId");

                            b1.Property<string>("City");

                            b1.Property<string>("Line1");

                            b1.Property<string>("Line2");

                            b1.Property<string>("StateCode");

                            b1.Property<int>("ZipCode");

                            b1.ToTable("Merchants");

                            b1.HasOne("ShiftManagementPortal.Core.Domain.Model.Merchant")
                                .WithOne("Address")
                                .HasForeignKey("ShiftManagementPortal.Core.Domain.Model.Address", "MerchantId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("ShiftManagementPortal.Core.Domain.Model.Venue", b =>
                {
                    b.OwnsOne("ShiftManagementPortal.Core.Domain.Model.Address", "Address", b1 =>
                        {
                            b1.Property<long>("VenueId");

                            b1.Property<string>("City");

                            b1.Property<string>("Line1");

                            b1.Property<string>("Line2");

                            b1.Property<string>("StateCode");

                            b1.Property<int>("ZipCode");

                            b1.ToTable("Venues");

                            b1.HasOne("ShiftManagementPortal.Core.Domain.Model.Venue")
                                .WithOne("Address")
                                .HasForeignKey("ShiftManagementPortal.Core.Domain.Model.Address", "VenueId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
